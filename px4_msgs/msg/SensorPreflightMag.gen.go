/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_preflight_mag.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorPreflightMag", SensorPreflightMagTypeSupport)
}

// Do not create instances of this type directly. Always use NewSensorPreflightMag
// function instead.
type SensorPreflightMag struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds). Pre-flight sensor check metrics.The topic will not be updated when the vehicle is armed
	MagInconsistencyAngle float32 `yaml:"mag_inconsistency_angle"`// maximum angle between magnetometer instance field vectors in radians.
}

// NewSensorPreflightMag creates a new SensorPreflightMag with default values.
func NewSensorPreflightMag() *SensorPreflightMag {
	self := SensorPreflightMag{}
	self.SetDefaults()
	return &self
}

func (t *SensorPreflightMag) Clone() types.Message {
	clone := *t
	return &clone
}

func (t *SensorPreflightMag) SetDefaults() {
	
}

// Modifying this variable is undefined behavior.
var SensorPreflightMagTypeSupport types.MessageTypeSupport = _SensorPreflightMagTypeSupport{}

type _SensorPreflightMagTypeSupport struct{}

func (t _SensorPreflightMagTypeSupport) New() types.Message {
	return NewSensorPreflightMag()
}

func (t _SensorPreflightMagTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorPreflightMag
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorPreflightMag__create())
}

func (t _SensorPreflightMagTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorPreflightMag__destroy((*C.px4_msgs__msg__SensorPreflightMag)(pointer_to_free))
}

func (t _SensorPreflightMagTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorPreflightMag)
	mem := (*C.px4_msgs__msg__SensorPreflightMag)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.mag_inconsistency_angle = C.float(m.MagInconsistencyAngle)
}

func (t _SensorPreflightMagTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorPreflightMag)
	mem := (*C.px4_msgs__msg__SensorPreflightMag)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.MagInconsistencyAngle = float32(mem.mag_inconsistency_angle)
}

func (t _SensorPreflightMagTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorPreflightMag())
}

type CSensorPreflightMag = C.px4_msgs__msg__SensorPreflightMag
type CSensorPreflightMag__Sequence = C.px4_msgs__msg__SensorPreflightMag__Sequence

func SensorPreflightMag__Sequence_to_Go(goSlice *[]SensorPreflightMag, cSlice CSensorPreflightMag__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorPreflightMag, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SensorPreflightMag__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorPreflightMag * uintptr(i)),
		))
		SensorPreflightMagTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SensorPreflightMag__Sequence_to_C(cSlice *CSensorPreflightMag__Sequence, goSlice []SensorPreflightMag) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorPreflightMag)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SensorPreflightMag * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SensorPreflightMag)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorPreflightMag * uintptr(i)),
		))
		SensorPreflightMagTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SensorPreflightMag__Array_to_Go(goSlice []SensorPreflightMag, cSlice []CSensorPreflightMag) {
	for i := 0; i < len(cSlice); i++ {
		SensorPreflightMagTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorPreflightMag__Array_to_C(cSlice []CSensorPreflightMag, goSlice []SensorPreflightMag) {
	for i := 0; i < len(goSlice); i++ {
		SensorPreflightMagTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

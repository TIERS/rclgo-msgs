/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package fog_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lfog_msgs__rosidl_typesupport_c -lfog_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <fog_msgs/msg/control_interface_diagnostics.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("fog_msgs/ControlInterfaceDiagnostics", ControlInterfaceDiagnosticsTypeSupport)
}

// Do not create instances of this type directly. Always use NewControlInterfaceDiagnostics
// function instead.
type ControlInterfaceDiagnostics struct {
	Armed bool `yaml:"armed"`
	Airborne bool `yaml:"airborne"`
	Moving bool `yaml:"moving"`
	MissionFinished bool `yaml:"mission_finished"`
	WaypointsToGo uint8 `yaml:"waypoints_to_go"`
	GettingTimesync bool `yaml:"getting_timesync"`
	GettingGps bool `yaml:"getting_gps"`
	GettingOdom bool `yaml:"getting_odom"`
	GettingControlMode bool `yaml:"getting_control_mode"`
	GettingLandSensor bool `yaml:"getting_land_sensor"`
}

// NewControlInterfaceDiagnostics creates a new ControlInterfaceDiagnostics with default values.
func NewControlInterfaceDiagnostics() *ControlInterfaceDiagnostics {
	self := ControlInterfaceDiagnostics{}
	self.SetDefaults()
	return &self
}

func (t *ControlInterfaceDiagnostics) Clone() *ControlInterfaceDiagnostics {
	c := &ControlInterfaceDiagnostics{}
	c.Armed = t.Armed
	c.Airborne = t.Airborne
	c.Moving = t.Moving
	c.MissionFinished = t.MissionFinished
	c.WaypointsToGo = t.WaypointsToGo
	c.GettingTimesync = t.GettingTimesync
	c.GettingGps = t.GettingGps
	c.GettingOdom = t.GettingOdom
	c.GettingControlMode = t.GettingControlMode
	c.GettingLandSensor = t.GettingLandSensor
	return c
}

func (t *ControlInterfaceDiagnostics) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ControlInterfaceDiagnostics) SetDefaults() {
	t.Armed = false
	t.Airborne = false
	t.Moving = false
	t.MissionFinished = false
	t.WaypointsToGo = 0
	t.GettingTimesync = false
	t.GettingGps = false
	t.GettingOdom = false
	t.GettingControlMode = false
	t.GettingLandSensor = false
}

// CloneControlInterfaceDiagnosticsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneControlInterfaceDiagnosticsSlice(dst, src []ControlInterfaceDiagnostics) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ControlInterfaceDiagnosticsTypeSupport types.MessageTypeSupport = _ControlInterfaceDiagnosticsTypeSupport{}

type _ControlInterfaceDiagnosticsTypeSupport struct{}

func (t _ControlInterfaceDiagnosticsTypeSupport) New() types.Message {
	return NewControlInterfaceDiagnostics()
}

func (t _ControlInterfaceDiagnosticsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.fog_msgs__msg__ControlInterfaceDiagnostics
	return (unsafe.Pointer)(C.fog_msgs__msg__ControlInterfaceDiagnostics__create())
}

func (t _ControlInterfaceDiagnosticsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.fog_msgs__msg__ControlInterfaceDiagnostics__destroy((*C.fog_msgs__msg__ControlInterfaceDiagnostics)(pointer_to_free))
}

func (t _ControlInterfaceDiagnosticsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ControlInterfaceDiagnostics)
	mem := (*C.fog_msgs__msg__ControlInterfaceDiagnostics)(dst)
	mem.armed = C.bool(m.Armed)
	mem.airborne = C.bool(m.Airborne)
	mem.moving = C.bool(m.Moving)
	mem.mission_finished = C.bool(m.MissionFinished)
	mem.waypoints_to_go = C.uint8_t(m.WaypointsToGo)
	mem.getting_timesync = C.bool(m.GettingTimesync)
	mem.getting_gps = C.bool(m.GettingGps)
	mem.getting_odom = C.bool(m.GettingOdom)
	mem.getting_control_mode = C.bool(m.GettingControlMode)
	mem.getting_land_sensor = C.bool(m.GettingLandSensor)
}

func (t _ControlInterfaceDiagnosticsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ControlInterfaceDiagnostics)
	mem := (*C.fog_msgs__msg__ControlInterfaceDiagnostics)(ros2_message_buffer)
	m.Armed = bool(mem.armed)
	m.Airborne = bool(mem.airborne)
	m.Moving = bool(mem.moving)
	m.MissionFinished = bool(mem.mission_finished)
	m.WaypointsToGo = uint8(mem.waypoints_to_go)
	m.GettingTimesync = bool(mem.getting_timesync)
	m.GettingGps = bool(mem.getting_gps)
	m.GettingOdom = bool(mem.getting_odom)
	m.GettingControlMode = bool(mem.getting_control_mode)
	m.GettingLandSensor = bool(mem.getting_land_sensor)
}

func (t _ControlInterfaceDiagnosticsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__fog_msgs__msg__ControlInterfaceDiagnostics())
}

type CControlInterfaceDiagnostics = C.fog_msgs__msg__ControlInterfaceDiagnostics
type CControlInterfaceDiagnostics__Sequence = C.fog_msgs__msg__ControlInterfaceDiagnostics__Sequence

func ControlInterfaceDiagnostics__Sequence_to_Go(goSlice *[]ControlInterfaceDiagnostics, cSlice CControlInterfaceDiagnostics__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ControlInterfaceDiagnostics, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.fog_msgs__msg__ControlInterfaceDiagnostics__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__ControlInterfaceDiagnostics * uintptr(i)),
		))
		ControlInterfaceDiagnosticsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ControlInterfaceDiagnostics__Sequence_to_C(cSlice *CControlInterfaceDiagnostics__Sequence, goSlice []ControlInterfaceDiagnostics) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.fog_msgs__msg__ControlInterfaceDiagnostics)(C.malloc((C.size_t)(C.sizeof_struct_fog_msgs__msg__ControlInterfaceDiagnostics * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.fog_msgs__msg__ControlInterfaceDiagnostics)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__ControlInterfaceDiagnostics * uintptr(i)),
		))
		ControlInterfaceDiagnosticsTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ControlInterfaceDiagnostics__Array_to_Go(goSlice []ControlInterfaceDiagnostics, cSlice []CControlInterfaceDiagnostics) {
	for i := 0; i < len(cSlice); i++ {
		ControlInterfaceDiagnosticsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ControlInterfaceDiagnostics__Array_to_C(cSlice []CControlInterfaceDiagnostics, goSlice []ControlInterfaceDiagnostics) {
	for i := 0; i < len(goSlice); i++ {
		ControlInterfaceDiagnosticsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
